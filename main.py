import math
from collections import Counter
import sys
import pickle


class Node(object):

    def __init__(self, char=None, value=0, right=None, left=None,):
        self.value = value  # вес ноды ака количество таких символов в тексте
        self.right = right  # правый ребенок
        self.left = left  # левый ребенок
        self.char = char  # символ, для которого работаем

    def __lt__(self, other):  # less than - для сортировкм нод
        return self.value < other.value

    def __repr__(self): # represent - по большей части для дебага, возвращает описание ноды
        return "\"" + str(self.char) + "\"-" + str(self.value) + " (" + str(self.right) + " " + str(self.left) + ")"


def create_dict(text):
    dict = {}
    nodes = []

    def dfs(node, way):
        if node.right or node.left:  # если есть ребенок
            dfs(node.right, way + "1") # запускаем для правого, записываем путь
            dfs(node.left, way + "0")  # для левого
        else:
            dict[node.char] = way  # дошли до конца - записываем в словарь код символа (путь)
            return

    c = Counter(text)  # считаем количество символов
    for e in c:
        nodes.append(Node(e, c[e])) # создаем ноду для каждого символа

    while len(nodes) > 1:
        nodes.sort()  # сортируем и берем 2 самых маленьких ноды (те, символов которых меньше всего в тексте)
        m1 = nodes.pop(0)
        m2 = nodes.pop(0)
        nodes.append(Node(m1.char + m2.char, m1.value + m2.value, m1, m2))  # содаем ноду-родителя, символы конкатенируем, веса складываем

    dfs(nodes[0], "")  # запускаем дфс
    return dict


def encode(text, dict):  # просто бежим по символам и записываем их код
    encoded = ""
    for el in text:
        encoded += dict[el]
    return encoded


def decode(text, dict):
    letters = {value: key for key, value in dict.items()}  # транспонируем словарь
    decoded = ""
    buff = ""

    for i in text:
        buff += i  # добавляем в буффер новый бит
        if buff in letters:  # если встретился символ с таким кодом, записываем. Коды соотв. правилу фано - однозначное трактование
            decoded += letters[buff]
            buff = ""
    return decoded


if __name__ == '__main__':
    if len(sys.argv) < 4:
        raise "Not enough arguments"
    method = sys.argv[1]
    in_path = sys.argv[2]
    out_path = sys.argv[3]

    if method == '--encode':
        inf = open(in_path, 'r')
        ouf = open(out_path, 'wb')
        text = inf.read()
        dict = create_dict(text)  # создаем словарь с кодами

        ouf.write(len(dict).to_bytes(1, 'big'))  # write dict len to bin file as 1 byte

        # print(dict)
        # print("Dict len =", len(dict))

        max_el_code_len = max(len(str(el)) + 1 for el in dict.values())  # calculate max code size with MSB 1
        max_el_code_len = math.ceil(max_el_code_len / 8)  # as bytes
        ouf.write(max_el_code_len.to_bytes(1, 'big'))  # write this as 1 byte
        # print('max_el_code_len', max_el_code_len)

        for el in dict:
            # print(ord(el))
            # print('bin=', str(bin(ord(el))))
            ouf.write(ord(el).to_bytes(2, 'big'))  # write ASCII codes as 2 bytes
            ouf.write(int('1' + dict[el], 2).to_bytes(max_el_code_len, 'big'))  # and code with MSB 1 as byte(s)

        encoded = '1' + encode(text, dict)
        #print("Encoded text = " + encoded)
        #pickle.dump(int(encoded), ouf)
        ouf.write(int(encoded, 2).to_bytes(math.ceil(len(encoded) / 8), 'big'))
        inf.close()
        ouf.close()

    if method == '--decode':
        inf = open(in_path, 'rb')
        ouf = open(out_path, 'w')

        data = inf.read().hex()
        # print('data=', data)

        l = int(data[0:2], 16)
        # print('l=', l)

        max_el_code_len = int(data[2:4], 16)
        # print('max_el_code_len=', max_el_code_len)

        dict = {}

        for i in range(5, 5 + (2 + max_el_code_len ) * l * 2, 4 + max_el_code_len * 2):
            char = data[i:i + 3]
            # print(5 + i, 5 + (i + 3))
            # print(char, chr(int(char, 16)))
            code = int(data[3 + i: 3 + (i + max_el_code_len * 2)], 16)
            # print('Code is=', bin(code))
            # print(9 + i, 9 + (i + max_el_code_len))
            dict[chr(int(char, 16))] = bin(code)[3:]

        # print(dict)

        text = data[2 + 2 + (4 + max_el_code_len * 2) * l:]
        # print(2 + 2 + (4 + max_el_code_len * 2) * l)

        text = bin(int(text, 16))[3:]
        # text = '0' * (8 - len(text) % 8) + text
        # print(text)

        decoded = decode(text, dict)
        # print("Decoded text = " + decoded)
        ouf.write(decoded)

        inf.close()
        ouf.close()

# first byte - dict len
# second byte - code len
# then 2 bytes of char and (code len) bytes of code for (dict len) times
#11001010100100001000001011110110011
#11001010100100001000001011110110011
#{'r': '111', 'd': '110', 'l': '10', '!': '011', 'o': '010', 'H': '0011', 'e': '0010', ' ': '0001', 'w': '0000'}
#{'r': '111', 'd': '110', 'l': '10', '!': '011', 'o': '010', 'H': '0011', 'e': '0010', ' ': '0001', 'w': '0000'}

#{'s': '111', 'l': '1101', 'm': '1100', ' ': '101', 'e': '100', 't': '0111', 'x': '0110', '\n': '0101', 'T': '01001', 'h': '01000', 'p': '00111', 'H': '00110', 'y': '00101', '!': '00100', 'I': '00011', 'a': '00010', 'i': '0000'}
#{'s': '111', 'l': '1101', 'm': '1100', ' ': '101', 'e': '100', 't': '0111', 'x': '0110', '\n': '0101', 'T': '01001', 'h': '01000', 'p': '00111', 'H': '00110', 'y': '00101', '!': '00100', 'I': '00011'}


#{'r': '1111', 'd': '11101', 'g': '111001', '\n': '11100011', 'P': '111000101', 'F': '1110001001', 'E': '1110001000', 'S': '11100001', 'M': '111000001', 'V': '111000000', 'e': '110', 'l': '1011', 'n': '1010', 'o': '10011', 'f': '1001011', 'q': '1001010', 'b': '1001001', 'C': '100100011', 'I': '1001000101', 'D': '1001000100', 'h': '10010000', 's': '1000', 'a': '0111', 't': '0110', 'c': '01011', 'v': '010101', 'p': '010100', 'u': '0100', ' ': '001', 'i': '0001', ',': '0000111', 'N': '00001101', 'A': '0000110011', 'U': '00001100101', 'L': '00001100100', 'x': '000011000', '.': '000010', 'm': '00000'}
#{'r': '', 'd': '1', 'g': '11', '\n': '1110', 'P': '11100', 'F': '111000', 'E': '111000', 'S': '1110', 'M': '11100', 'V': '11100', 'e': '', 'l': '', 'n': '', 'o': '1', 'f': '100', 'q': '100', 'b': '100', 'C': '10010', 'I': '100100', 'D': '100100', 'h': '1001', 's': '', 'a': '', 't': '', 'c': '0', 'v': '01', 'p': '01', 'u': '', ' ': '', 'i': '', ',': '000', 'N': '0000', 'A': '000011', 'U': '0000110', 'L': '0000110', 'x': '00001', '.': '00', 'm': '0'}

#{'u': '1111111', 'i': '1111110', 'o': '1111101', 'p': '1111100', 'a': '1111011', 's': '1111010', 'd': '1111001', 'f': '1111000', 'g': '1110111', 'h': '1110110', 'j': '1110101', 'k': '1110100', 'l': '1110011', 'z': '1110010', 'x': '1110001', 'c': '1110000', 'v': '1101111', 'b': '1101110', 'n': '1101101', 'm': '1101100', 'Q': '1101011', 'W': '1101010', 'E': '1101001', 'R': '1101000', 'T': '1100111', 'Y': '1100110', 'U': '1100101', 'I': '1100100', 'O': '1100011', 'P': '1100010', 'A': '1100001', 'S': '1100000', 'D': '1011111', 'F': '1011110', 'G': '1011101', 'H': '1011100', 'J': '1011011', 'K': '1011010', 'L': '1011001', 'Z': '1011000', 'X': '1010111', 'C': '1010110', 'V': '1010101', 'B': '1010100', 'N': '1010011', 'M': '1010010', '{': '1010001', '}': '1010000', ':': '1001111', '"': '1001110', '>': '1001101', '?': '1001100', '<': '1001011', '\n': '1001010', 'й': '1001001', 'ц': '1001000', 'у': '1000111', 'к': '1000110', 'е': '1000101', 'н': '1000100', 'г': '1000011', 'ш': '1000010', 'щ': '1000001', 'з': '1000000', 'х': '0111111', 'ъ': '0111110', 'ф': '0111101', 'ы': '0111100', 'в': '0111011', 'а': '0111010', 'п': '0111001', 'р': '0111000', 'о': '0110111', 'л': '0110110', 'д': '0110101', 'ж': '0110100', 'э': '0110011', 'я': '0110010', 'ч': '0110001', 'с': '0110000', 'м': '0101111', 'и': '0101110', 'т': '0101101', 'ь': '0101100', 'б': '0101011', 'ю': '0101010', 'Й': '0101001', 'Ц': '0101000', 'У': '0100111', 'К': '0100110', 'Е': '0100101', 'Н': '0100100', 'Г': '0100011', 'Ш': '0100010', 'Щ': '0100001', 'З': '0100000', 'Х': '0011111', 'Ъ': '0011110', 'Ф': '0011101', 'Ы': '0011100', 'В': '0011011', 'А': '0011010', 'П': '0011001', 'Р': '0011000', 'О': '0010111', 'Л': '0010110', 'Д': '0010101', 'Ж': '0010100', 'Э': '0010011', 'Ч': '0010010', 'С': '0010001', 'М': '0010000', 'И': '0001111', 'Т': '0001110', 'Ь': '0001101', 'Б': '0001100', 'Ю': '0001011', '[': '0001010', '.': '000100', ']': '0000111', ';': '0000110', "'": '0000101', ',': '0000100', '/': '0000011', 'q': '00000101', 'w': '00000100', 'e': '00000011', 'r': '00000010', 't': '00000001', 'y': '00000000'}
#{'u': '11111110000', 'i': '11111100000', 'o': '11111010000', 'p': '11111000000', 'a': '11110110000', 's': '11110100000', 'd': '11110010000', 'f': '11110000000', 'g': '11101110000', 'h': '11101100000', 'j': '11101010000', 'k': '11101000000', 'l': '11100110000', 'z': '11100100000', 'x': '11100010000', 'c': '11100000000', 'v': '11011110000', 'b': '11011100000', 'n': '11011010000', 'm': '11011000000', 'Q': '11010110000', 'W': '11010100000', 'E': '11010010000', 'R': '11010000000', 'T': '11001110000', 'Y': '11001100000', 'U': '11001010000', 'I': '11001000000', 'O': '11000110000', 'P': '11000100000', 'A': '11000010000', 'S': '11000000000', 'D': '10111110000', 'F': '10111100000', 'G': '10111010000', 'H': '10111000000', 'J': '10110110000', 'K': '10110100000', 'L': '10110010000', 'Z': '10110000000', 'X': '10101110000', 'C': '10101100000', 'V': '10101010000', 'B': '10101000000', 'N': '10100110000', 'M': '10100100000', '{': '10100010000', '}': '10100000000', ':': '10011110000', '"': '10011100000', '>': '10011010000', '?': '10011000000', '<': '10010110000', '\n': '10010100000', 'й': '10010010000', 'ц': '10010000000', 'у': '10001110000', 'к': '10001100000', 'е': '10001010000', 'н': '10001000000', 'г': '10000110000', 'ш': '10000100000', 'щ': '10000010000', 'з': '10000000000', 'х': '01111110000', 'ъ': '01111100000', 'ф': '01111010000', 'ы': '01111000000', 'в': '01110110000', 'а': '01110100000', 'п': '01110010000', 'р': '01110000000', 'о': '01101110000', 'л': '01101100000', 'д': '01101010000', 'ж': '01101000000', 'э': '01100110000', 'я': '01100100000', 'ч': '01100010000', 'с': '01100000000', 'м': '01011110000', 'и': '01011100000', 'т': '01011010000', 'ь': '01011000000', 'б': '01010110000', 'ю': '01010100000', 'Й': '01010010000', 'Ц': '01010000000', 'У': '01001110000', 'К': '01001100000', 'Е': '01001010000', 'Н': '01001000000', 'Г': '01000110000', 'Ш': '01000100000', 'Щ': '01000010000', 'З': '01000000000', 'Х': '00111110000', 'Ъ': '00111100000', 'Ф': '00111010000', 'Ы': '00111000000', 'В': '00110110000', 'А': '00110100000', 'П': '00110010000', 'Р': '00110000000', 'О': '00101110000', 'Л': '00101100000', 'Д': '00101010000', 'Ж': '00101000000', 'Э': '00100110000', 'Ч': '00100100000', 'С': '00100010000', 'М': '00100000000', 'И': '00011110000', 'Т': '00011100000', 'Ь': '00011010000', 'Б': '00011000000', 'Ю': '00010110000', '[': '00010100000', '.': '0001000000', ']': '00001110000', ';': '00001100000', "'": '00001010000', ',': '00001000000', '/': '00000110000', 'q': '000001010000', 'w': '000001000000', 'e': '000000110000', 'r': '000000100000', 't': '000000010000', 'y': '000000001000'}

#{'u': '1111111', 'i': '1111110', 'o': '1111101', 'p': '1111100', 'a': '1111011', 's': '1111010', 'd': '1111001', 'f': '1111000', 'g': '1110111', 'h': '1110110', 'j': '1110101', 'k': '1110100', 'l': '1110011', 'z': '1110010', 'x': '1110001', 'c': '1110000', 'v': '1101111', 'b': '1101110', 'n': '1101101', 'm': '1101100', 'Q': '1101011', 'W': '1101010', 'E': '1101001', 'R': '1101000', 'T': '1100111', 'Y': '1100110', 'U': '1100101', 'I': '1100100', 'O': '1100011', 'P': '1100010', 'A': '1100001', 'S': '1100000', 'D': '1011111', 'F': '1011110', 'G': '1011101', 'H': '1011100', 'J': '1011011', 'K': '1011010', 'L': '1011001', 'Z': '1011000', 'X': '1010111', 'C': '1010110', 'V': '1010101', 'B': '1010100', 'N': '1010011', 'M': '1010010', '{': '1010001', '}': '1010000', ':': '1001111', '"': '1001110', '>': '1001101', '?': '1001100', '<': '1001011', '\n': '1001010', 'й': '1001001', 'ц': '1001000', 'у': '1000111', 'к': '1000110', 'е': '1000101', 'н': '1000100', 'г': '1000011', 'ш': '1000010', 'щ': '1000001', 'з': '1000000', 'х': '0111111', 'ъ': '0111110', 'ф': '0111101', 'ы': '0111100', 'в': '0111011', 'а': '0111010', 'п': '0111001', 'р': '0111000', 'о': '0110111', 'л': '0110110', 'д': '0110101', 'ж': '0110100', 'э': '0110011', 'я': '0110010', 'ч': '0110001', 'с': '0110000', 'м': '0101111', 'и': '0101110', 'т': '0101101', 'ь': '0101100', 'б': '0101011', 'ю': '0101010', 'Й': '0101001', 'Ц': '0101000', 'У': '0100111', 'К': '0100110', 'Е': '0100101', 'Н': '0100100', 'Г': '0100011', 'Ш': '0100010', 'Щ': '0100001', 'З': '0100000', 'Х': '0011111', 'Ъ': '0011110', 'Ф': '0011101', 'Ы': '0011100', 'В': '0011011', 'А': '0011010', 'П': '0011001', 'Р': '0011000', 'О': '0010111', 'Л': '0010110', 'Д': '0010101', 'Ж': '0010100', 'Э': '0010011', 'Ч': '0010010', 'С': '0010001', 'М': '0010000', 'И': '0001111', 'Т': '0001110', 'Ь': '0001101', 'Б': '0001100', 'Ю': '0001011', '[': '0001010', '.': '000100', ']': '0000111', ';': '0000110', "'": '0000101', ',': '0000100', '/': '0000011', 'q': '00000101', 'w': '00000100', 'e': '00000011', 'r': '00000010', 't': '00000001', 'y': '00000000'}
#{'u': '1111111', 'i': '1111110', 'o': '1111101', 'p': '1111100', 'a': '1111011', 's': '1111010', 'd': '1111001', 'f': '1111000', 'g': '1110111', 'h': '1110110', 'j': '1110101', 'k': '1110100', 'l': '1110011', 'z': '1110010', 'x': '1110001', 'c': '1110000', 'v': '1101111', 'b': '1101110', 'n': '1101101', 'm': '1101100', 'Q': '1101011', 'W': '1101010', 'E': '1101001', 'R': '1101000', 'T': '1100111', 'Y': '1100110', 'U': '1100101', 'I': '1100100', 'O': '1100011', 'P': '1100010', 'A': '1100001', 'S': '1100000', 'D': '1011111', 'F': '1011110', 'G': '1011101', 'H': '1011100', 'J': '1011011', 'K': '1011010', 'L': '1011001', 'Z': '1011000', 'X': '1010111', 'C': '1010110', 'V': '1010101', 'B': '1010100', 'N': '1010011', 'M': '1010010', '{': '1010001', '}': '1010000', ':': '1001111', '"': '1001110', '>': '1001101', '?': '1001100', '<': '1001011', '\n': '1001010', 'й': '1001001', 'ц': '1001000', 'у': '1000111', 'к': '1000110', 'е': '1000101', 'н': '1000100', 'г': '1000011', 'ш': '1000010', 'щ': '1000001', 'з': '1000000', 'х': '0111111', 'ъ': '0111110', 'ф': '0111101', 'ы': '0111100', 'в': '0111011', 'а': '0111010', 'п': '0111001', 'р': '0111000', 'о': '0110111', 'л': '0110110', 'д': '0110101', 'ж': '0110100', 'э': '0110011', 'я': '0110010', 'ч': '0110001', 'с': '0110000', 'м': '0101111', 'и': '0101110', 'т': '0101101', 'ь': '0101100', 'б': '0101011', 'ю': '0101010', 'Й': '0101001', 'Ц': '0101000', 'У': '0100111', 'К': '0100110', 'Е': '0100101', 'Н': '0100100', 'Г': '0100011', 'Ш': '0100010', 'Щ': '0100001', 'З': '0100000', 'Х': '0011111', 'Ъ': '0011110', 'Ф': '0011101', 'Ы': '0011100', 'В': '0011011', 'А': '0011010', 'П': '0011001', 'Р': '0011000', 'О': '0010111', 'Л': '0010110', 'Д': '0010101', 'Ж': '0010100', 'Э': '0010011', 'Ч': '0010010', 'С': '0010001', 'М': '0010000', 'И': '0001111', 'Т': '0001110', 'Ь': '0001101', 'Б': '0001100', 'Ю': '0001011', '[': '0001010', '.': '000100', ']': '0000111', ';': '0000110', "'": '0000101', ',': '0000100', '/': '0000011', 'q': '00000101', 'w': '00000100', 'e': '00000011', 'r': '00000010', 't': '00000001', 'y': '00000000'}



